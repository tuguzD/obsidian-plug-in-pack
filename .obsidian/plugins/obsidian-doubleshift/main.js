/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => Doubleshift2,
  findCommand: () => findCommand
});
var import_obsidian4 = __toModule(require("obsidian"));

// src/CommandSuggestion.ts
var import_obsidian = __toModule(require("obsidian"));
var commandSuggestion = class extends import_obsidian.FuzzySuggestModal {
  constructor(app2, plugin, shortcut) {
    super(app2);
    var _a, _b;
    this.plugin = plugin;
    this.shortcut = shortcut;
    this.setPlaceholder((_b = (_a = findCommand(shortcut.command)) == null ? void 0 : _a.name) != null ? _b : shortcut.command);
    this.open();
  }
  getItems() {
    return Object.values(this.plugin.commands);
  }
  getItemText(command) {
    return command.name;
  }
  onChooseItem(item, evt) {
    let command = findCommand(this.getItemText(item));
    this.shortcut.command = command.id;
    this.plugin.saveSettings();
    this.plugin.settingsTab.display();
  }
};

// src/DoubleshiftSettings.ts
var import_obsidian3 = __toModule(require("obsidian"));

// src/Shortcut.ts
var ShortcutCreator = class {
  constructor(plugin) {
    let shortcut = new class {
      constructor() {
        this.command = "";
        this.key = "Shift";
        this.lastKeyUpTime = Date.now();
      }
    }();
    new commandSuggestion(plugin.app, plugin, shortcut);
    plugin.settings.shortcuts.push(shortcut);
  }
};

// src/KeySelector.ts
var import_obsidian2 = __toModule(require("obsidian"));
var KeySelector = class extends import_obsidian2.Modal {
  constructor(app2, plugin, shortcut) {
    super(app2);
    this.plugin = plugin;
    this.shortcut = shortcut;
    this.key = this.shortcut.key;
  }
  onOpen() {
    let { contentEl } = this;
    let instructionEl = document.createElement("div");
    instructionEl.textContent = "press any key to change your current one. close this window to cancel";
    instructionEl.style.position = "absolute";
    instructionEl.style.left = "100";
    instructionEl.style.top = "1";
    instructionEl.style.fontSize = "12px";
    let shiftEl = document.createElement("h1");
    shiftEl.textContent = this.shortcut.key === " " ? "SPACE" : this.shortcut.key.toUpperCase();
    shiftEl.style.textAlign = "center";
    shiftEl.style.paddingTop = "50px";
    shiftEl.style.paddingBottom = "50px";
    let buttonEl = document.createElement("button");
    buttonEl.textContent = "Save";
    buttonEl.style.display = "block";
    buttonEl.style.margin = "0 auto";
    buttonEl.tabIndex = -1;
    buttonEl.addEventListener("click", () => this.save());
    contentEl.appendChild(instructionEl);
    contentEl.appendChild(shiftEl);
    contentEl.appendChild(buttonEl);
    document.addEventListener("keydown", (event) => this.detectKeypress(event, shiftEl));
  }
  save() {
    this.shortcut.key = this.key;
    this.plugin.saveSettings();
    this.plugin.settingsTab.display();
    this.close();
  }
  detectKeypress(event, element) {
    element.textContent = event.key === " " ? "SPACE" : event.key.toUpperCase();
    this.key = event.key;
  }
  onClose() {
    let { contentEl } = this;
    let buttonEl = contentEl.querySelector("button");
    let shiftEl = contentEl.querySelector("h1");
    buttonEl.removeEventListener("click", () => this.save());
    document.removeEventListener("keydown", (event) => this.detectKeypress(event, shiftEl));
    contentEl.empty();
  }
};

// src/DoubleshiftSettings.ts
var DoubleshiftSettings = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin, commands) {
    super(app2, plugin);
    this.plugin = plugin;
    this.commands = commands;
  }
  display() {
    this.plugin.refreshCommands();
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Delay").setDesc("The maximum delay between two presses of the respective key in 1/10 of a second").setTooltip("depending on how fast you type a too high number might annoy you").addSlider((component) => {
      component.setValue(this.plugin.settings.delay / 10).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
        this.plugin.settings.delay = Number(value * 10);
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian3.Setting(containerEl).setHeading().setName("Shortcuts").setDesc("all shortcuts you have currently set up").setHeading().setDisabled(true);
    this.plugin.settings.shortcuts.forEach((shortcut) => {
      let available = findCommand(shortcut.command) !== null;
      let s = new import_obsidian3.Setting(containerEl).addButton((component) => {
        component.setTooltip("change key").setButtonText(shortcut.key === " " ? "Space" : shortcut.key).onClick(() => {
          let sel = new KeySelector(this.app, this.plugin, shortcut);
          sel.open();
        });
      }).addButton((component) => {
        let commandName;
        if (available) {
          commandName = findCommand(shortcut.command).name;
        } else {
          commandName = "";
        }
        component.setButtonText("select command").setTooltip(commandName).onClick(() => {
          new commandSuggestion(this.app, this.plugin, shortcut);
          component.setTooltip(commandName);
          containerEl.empty();
          this.display();
        });
      }).addButton((component) => {
        component.setIcon("trash").onClick(() => {
          this.plugin.settings.shortcuts.remove(shortcut);
          this.plugin.saveSettings();
          containerEl.empty();
          this.display();
        });
      });
      if (!available) {
        s.setDesc("the corresponding plugin has been disabled or uninstalled");
      }
    });
    new import_obsidian3.Setting(containerEl).addButton((component) => {
      component.setButtonText("Add").onClick(() => __async(this, null, function* () {
        yield new ShortcutCreator(this.plugin);
        yield this.plugin.saveSettings();
        containerEl.empty();
        this.display();
      }));
    });
  }
};

// src/main.ts
function findCommand(a) {
  let commands = Object.values(this.app.commands.commands);
  for (let i = 0; i < commands.length; i++) {
    let command = commands[i];
    if (command.id === a || command.name === a) {
      return command;
    }
  }
  return null;
}
var DEFAULT_SETTINGS = {
  delay: 500,
  key: "Shift",
  shortcuts: [new class {
    constructor() {
      this.command = "command-palette:open";
      this.key = "Shift";
      this.lastKeyUpTime = Date.now();
    }
  }()]
};
var Doubleshift2 = class extends import_obsidian4.Plugin {
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      this.refreshCommands();
    });
  }
  refreshCommands() {
    this.commands = Object.values(this.app.commands.commands);
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.settingsTab = new DoubleshiftSettings(this.app, this, this.commands);
      this.addSettingTab(this.settingsTab);
      this.registerDomEvent(window, "keyup", (event) => this.doubleshift(event.key));
    });
  }
  doubleshift(key) {
    this.settings.shortcuts.forEach((shortcut) => {
      if (key !== shortcut.key) {
        shortcut.lastKeyUpTime = 0;
        return;
      }
      if (Date.now() - shortcut.lastKeyUpTime < this.settings.delay) {
        shortcut.lastKeyUpTime = 0;
        app.commands.executeCommandById(shortcut.command);
      } else {
        shortcut.lastKeyUpTime = Date.now();
      }
    });
  }
};


/* nosourcemap */