/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var S=Object.defineProperty;var q=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var z=(s,e)=>{for(var t in e)S(s,t,{get:e[t],enumerable:!0})},$=(s,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of W(e))!U.call(s,n)&&n!==t&&S(s,n,{get:()=>e[n],enumerable:!(i=q(e,n))||i.enumerable});return s};var R=s=>$(S({},"__esModule",{value:!0}),s);var j={};z(j,{BUTTON_CLASS:()=>T,LUCID_ICON_NAME:()=>D,WINDOW_ID:()=>K,default:()=>O});module.exports=R(j);var L=require("obsidian");var V=require("obsidian");var k=require("obsidian"),d=class{constructor(e,t){this._plugin=e,this._view=t}get headings(){return this._getHeadingsForView(this._view)}_getHeadingsForView(e){var a;let t=e==null?void 0:e.file;if(!t)return[];let n=(a=(this._plugin.app.metadataCache.getFileCache(t)||{}).headings)!=null?a:[];return this._cleanupHeadings(n)}_cleanupHeadings(e){let t=l=>(0,k.htmlToMarkdown)(l).replaceAll("*","").replaceAll("_","").replaceAll("`","").replaceAll("==","").replaceAll("~~",""),i=l=>l.replace(/\[([^\]]+)\]\(.*?\)/g,"$1").replace(/\[\[([^\]]+)\|([^\]]+)\]\]/g,"$2").replace(/\[\[([^\]]+)\]\]/g,"$1"),n=e;return n.forEach(l=>{let a=l.heading;a=t(a),a=i(a),l.heading=a}),n}};var g=class{constructor(e,t){this._plugin=e,t?(this.element=t,this.inputField=this.element.querySelector("input"),this.clearButton=this.element.querySelector(".dynamic-outline-search-clear-button")):(this.element=createEl("div",{cls:"dynamic-outline-search-container"}),this.inputField=createEl("input",{attr:{placeholder:"Search headings...",type:"search"}}),this.element.appendChild(this.inputField),this.clearButton=createEl("div",{cls:"search-input-clear-button dynamic-outline-search-clear-button",attr:{"aria-label":"Clear search"}}),this.element.appendChild(this.clearButton),this._setupEventListeners())}clearInput(){this.inputField.value="";let e=new Event("input",{bubbles:!0,cancelable:!0});this.inputField.dispatchEvent(e),this.inputField.focus()}_setupEventListeners(){this._plugin.registerDomEvent(this.inputField,"input",()=>{this._toggleClearButton()}),this._plugin.registerDomEvent(this.clearButton,"click",()=>{this.clearInput()})}_toggleClearButton(){this.inputField.value.length>0?(this.clearButton.classList.add("visible"),this.inputField.classList.add("has-content")):(this.clearButton.classList.remove("visible"),this.inputField.classList.remove("has-content"))}};var p=class{constructor(e,t){this._plugin=e,this._view=t,this._stateManager=o.getInstance()}createLiElement(e){let t=createEl("li",{attr:{"data-heading-line":e.position.start.line}}),i=createEl("a",{cls:`heading-level-${e.level}`,text:e.heading});return t.append(i),this._setupEventListener(t,e),t}_setupEventListener(e,t){e.onclick=()=>{if(this._view.file&&(this._view.leaf.openFile(this._view.file,{eState:{line:t.position.start.line}}),setTimeout(()=>{this._view.currentMode.applyScroll(t.position.start.line)},0),this._plugin.settings.resetSearchFieldOnHeadingClick)){let n=this._stateManager.getWindow(this._view).getContainerElement().querySelector(".dynamic-outline-search-container");if(!n)return;new g(this._plugin,n).clearInput()}}}};var h=class{constructor(e,t){this._pinned=!1;this._plugin=e,this._view=t,this._stateManager=o.getInstance(),this.visible=!1,this._containerEl=this.createElement(),this.setupEventListeners(),this._dynamicHeadings=new d(this._plugin,this._view)}get pinned(){return this._pinned}set pinned(e){this._pinned=e,this._plugin.settings.toggleOnHover&&!e&&this.hide()}setupEventListeners(){this._plugin.registerDomEvent(this._containerEl.querySelector("input"),"input",()=>{this.filterItems()}),this._plugin.settings.toggleOnHover&&(this._plugin.registerDomEvent(this._containerEl,"mouseenter",()=>this.handleMouseEnter()),this._plugin.registerDomEvent(this._containerEl,"mouseleave",()=>this.handleMouseLeave()))}filterItems(){let t=this._containerEl.querySelector("input").value.toLowerCase(),i=this._containerEl.querySelectorAll("li");i==null||i.forEach(n=>{var l;(l=n.textContent)!=null&&l.toLowerCase().includes(t)?n.classList.remove("outline-item-hidden"):n.classList.add("outline-item-hidden")})}handleMouseEnter(){this.clearHideTimeout()}handleMouseLeave(){this._plugin.settings.toggleOnHover&&!this.pinned&&(h.hideTimeout=setTimeout(()=>{this.hide()},100))}getContainerElement(){return this._containerEl}clearHideTimeout(){h.hideTimeout&&(clearTimeout(h.hideTimeout),h.hideTimeout=null)}createElement(){let e=createEl("div",{attr:{id:"dynamic-outline"}}),t=new g(this._plugin);e.appendChild(t.element);let i=createEl("div",{cls:"dynamic-outline-content-container"});return i.createEl("ul",{}),e.appendChild(i),e}checkForObstructions(){let e=document.getElementById("cMenuToolbarModalBar");e!=null&&e.classList.contains("top")&&this._containerEl.classList.add("obstruction-top")}highlightCurrentHeading(e="nearest"){let t=this._view.currentMode.getScroll(),n=this.getHeadings().reduce((a,y)=>t!==void 0&&y.position.start.line<=t+1&&(!a||a.position.start.line<y.position.start.line)?y:a,null);if(n){let a=this._containerEl.querySelector(`li[data-heading-line="${n.position.start.line}"]`);a&&(this._containerEl.querySelectorAll("li").forEach(N=>N.classList.remove("highlight")),a.classList.add("highlight"))}else{let a=this._containerEl.querySelector("li");a==null||a.classList.add("highlight")}let l=this._containerEl.querySelector("li.highlight");l==null||l.scrollIntoView({behavior:"instant",block:e})}getHeadings(){return this._dynamicHeadings.headings}update(){let e=this._containerEl.querySelector("ul");if(!e)return;e.empty();let t=new p(this._plugin,this._view),i=this.getHeadings();i==null||i.forEach(n=>{let l=t.createLiElement(n);e.append(l)}),this._plugin.settings.highlightCurrentHeading&&this.highlightCurrentHeading()}show(e){if(this.visible)return;this.checkForObstructions(),this.update(),this._view.contentEl.append(this._containerEl),this.visible=!0;let t=this._stateManager.getButton(this._view);if(t.active=!0,this._plugin.settings.autofocusSearchOnOpen){let i=this._containerEl.querySelector("input");i==null||i.focus()}this._plugin.settings.highlightCurrentHeading&&this.highlightCurrentHeading(e==null?void 0:e.scrollBlock)}hide(){if(!this.visible||this._plugin.settings.toggleOnHover&&this.pinned)return;this.visible=!1,this._containerEl.remove();let e=this._stateManager.getButton(this._view);e.active=!1,this._plugin.settings.toggleOnHover&&(this.pinned=!1)}toggle(){this.visible?this.hide():this.show()}},u=h;u.hideTimeout=null;var m=class{constructor(e,t){this._plugin=e,this._view=t,this._stateManager=o.getInstance(),this.visible=!1,this._active=!1,this._containerEl=this.createElement(),this.setupEventListeners()}get active(){return this._active}set active(e){this._active=e,this._containerEl.classList.toggle("button-active",this._active)}setupEventListeners(){this._plugin.registerDomEvent(this._containerEl,"click",()=>this.handleClick()),this._plugin.settings.toggleOnHover&&(this._plugin.registerDomEvent(this._containerEl,"mouseenter",()=>this.handleMouseEnter()),this._plugin.registerDomEvent(this._containerEl,"mouseleave",()=>this.handleMouseLeave()))}createElement(){let e=createEl("button",{cls:`clickable-icon view-action ${T}`,attr:{"aria-label":"Toggle Dynamic Outline"}});return(0,V.setIcon)(e,D),e}handleMouseEnter(){let e=this._stateManager.getWindow(this._view);e.visible||e.show(),this._plugin.settings.toggleOnHover&&e.clearHideTimeout()}handleMouseLeave(){let e=this._stateManager.getWindow(this._view);e.visible&&!e.pinned&&(u.hideTimeout=setTimeout(()=>{e.hide()},100))}getViewActionButtons(){return this._view.containerEl.querySelector("div.view-actions")}handleClick(){let e=this._stateManager.getWindow(this._view);if(e.visible){if(this._plugin.settings.toggleOnHover)if(e.pinned)e.pinned=!1,e.clearHideTimeout();else{e.pinned=!0;return}e.hide()}else e.show({scrollBlock:"start"}),e.pinned=!0}show(){let e=this.getViewActionButtons();e==null||e.insertBefore(this._containerEl,e==null?void 0:e.firstChild),this.visible=!0}hide(){this._containerEl.remove(),this.visible=!1}};var o=class{constructor(e){this._windows=new Map;this._buttons=new Map;this._plugin=e}static initialize(e){return o.instance||(o.instance=new o(e)),o.instance}static getInstance(){if(!o.instance)throw new Error("OutlineStateManager not initialized");return o.instance}getKey(e){return e.leaf.id}getButton(e){let t=this.getKey(e);return this._buttons.has(t)||this._buttons.set(t,new m(this._plugin,e)),this._buttons.get(t)}getWindow(e){let t=this.getKey(e);return this._windows.has(t)||this._windows.set(t,new u(this._plugin,e)),this._windows.get(t)}handleFileOpen(){let e=this._plugin.getActiveMarkdownView();if(!e)return;let t=this.getWindow(e),i=t.getHeadings(),n=i&&i.length>=this._plugin.settings.minimumHeadings;t.visible&&!n?(this._plugin.settings.toggleOnHover&&(t.pinned=!1),t.hide()):!t.visible&&n&&(setTimeout(()=>t.show(),50),this._plugin.settings.toggleOnHover&&(t.pinned=!0))}handleMetadataChanged(){let e=this._plugin.getActiveMarkdownView();e&&this.getWindow(e).update()}createButtonsInActiveViews(){this._plugin.getActiveMarkdownViews().forEach(e=>{let t=this.getButton(e);t.visible||t.show()})}removeAll(){this._windows.forEach(e=>e.visible&&e.hide()),this._buttons.forEach(e=>e.visible&&e.hide()),this._windows.clear(),this._buttons.clear()}};var b=require("obsidian");var B=require("obsidian");var r=class{constructor(e,t){this.plugin=e,this.containerEl=t}};var v=class extends r{display(){new B.Setting(this.containerEl).setName("Autofocus search field on open").setDesc("Focus the search field immediately after the outline is opened.").addToggle(e=>{e.setValue(this.plugin.settings.autofocusSearchOnOpen).onChange(async t=>{this.plugin.settings.autofocusSearchOnOpen=t,await this.plugin.saveSettings()})})}};var P=require("obsidian");var w=class extends r{display(){new P.Setting(this.containerEl).setName("Highlight active heading").setDesc(c('Highlight the current outline heading when scrolling the file.<br><span style="color: var(--text-accent)">Requires a plugin restart to take full effect.</span>')).addToggle(e=>{e.setValue(this.plugin.settings.highlightCurrentHeading).onChange(async t=>{this.plugin.settings.highlightCurrentHeading=t,await this.plugin.saveSettings()})})}};var x=require("obsidian");var f=class extends r{display(){new x.Setting(this.containerEl).setName("Style customizations").setDesc(c('Please use the <a href="https://obsidian.md/plugins?id=obsidian-style-settings">Style Settings</a> plugin to apply custom font size, opacity, alignment, etc.'))}};var A=require("obsidian");var E=class extends r{display(){new A.Setting(this.containerEl).setName("Reset search field").setDesc("Erase the search field contents after jumping to a heading.").addToggle(e=>{e.setValue(this.plugin.settings.resetSearchFieldOnHeadingClick).onChange(async t=>{this.plugin.settings.resetSearchFieldOnHeadingClick=t,await this.plugin.saveSettings()})})}};var C=require("obsidian");var _=class extends r{display(){new C.Setting(this.containerEl).setName("Toggle automatically").setDesc(c('Show and hide the outline automatically based on the number of headings in the file.<br><span style="color: var(--text-accent)">Requires an Obsidian restart to take full effect.</span>')).addToggle(t=>{t.setValue(this.plugin.settings.toggleAutomatically).onChange(async i=>{this.plugin.settings.toggleAutomatically=i,await this.plugin.saveSettings(),e.setDisabled(!i)})});let e=new C.Setting(this.containerEl).setName("Minimum headings").setDesc(c("The minimum number of headings in the file to trigger the outline.")).addSlider(t=>{t.setLimits(1,10,1).setDynamicTooltip().setValue(this.plugin.settings.minimumHeadings).onChange(async i=>{this.plugin.settings.minimumHeadings=i,await this.plugin.saveSettings()})}).setDisabled(!this.plugin.settings.toggleAutomatically)}};var I=require("obsidian");var M=class extends r{display(){new I.Setting(this.containerEl).setName("Toggle on hover").setDesc(c('Show and hide on mouse hover. Pin the outline on mouse click.<br><span style="color: var(--text-accent)">Requires a plugin restart to take full effect.</span>')).addToggle(e=>{e.setValue(this.plugin.settings.toggleOnHover).onChange(async t=>{this.plugin.settings.toggleOnHover=t,await this.plugin.saveSettings()})})}};var F={autofocusSearchOnOpen:!0,highlightCurrentHeading:!0,minimumHeadings:1,resetSearchFieldOnHeadingClick:!0,toggleAutomatically:!1,toggleOnHover:!1};function c(s){return(0,b.sanitizeHTMLToDom)(s)}var H=class extends b.PluginSettingTab{constructor(t,i){super(t,i);this.plugin=i}display(){let{containerEl:t}=this;t.empty(),new _(this.plugin,t).display(),new M(this.plugin,t).display(),new w(this.plugin,t).display(),new E(this.plugin,t).display(),new v(this.plugin,t).display(),new f(this.plugin,t).display()}};var K="dynamic-outline",T="dynamic-outline-button",D="list",O=class extends L.Plugin{constructor(){super(...arguments);this.getActiveMarkdownView=()=>this.app.workspace.getActiveViewOfType(L.MarkdownView);this.getActiveMarkdownViews=()=>this.app.workspace.getLeavesOfType("markdown").map(t=>t.view)}async onload(){await this.loadSettings(),this.addSettingTab(new H(this.app,this)),this.app.workspace.trigger("parse-style-settings"),this.stateManager=o.initialize(this),this.stateManager.createButtonsInActiveViews(),this.registerEvent(this.app.workspace.on("layout-change",()=>{this.stateManager.createButtonsInActiveViews()})),this.registerEvent(this.app.workspace.on("active-leaf-change",()=>{this.stateManager.handleMetadataChanged()})),this.registerEvent(this.app.metadataCache.on("changed",()=>{this.stateManager.handleMetadataChanged()})),this.settings.toggleAutomatically&&this.registerEvent(this.app.workspace.on("file-open",()=>{this.stateManager.handleFileOpen()})),this.settings.highlightCurrentHeading&&(activeWindow.document.addEventListener("scroll",t=>{let i=t.target;if(!(i!=null&&i.classList.contains("dynamic-outline-content-container"))){let n=this.getActiveMarkdownView();n&&this.stateManager.getWindow(n).highlightCurrentHeading()}},!0),this.registerEvent(this.app.metadataCache.on("changed",()=>{let t=this.getActiveMarkdownView();t&&this.stateManager.getWindow(t).highlightCurrentHeading()}))),this.addCommand({id:"toggle-dynamic-outline",name:"Toggle for current file",checkCallback:t=>{let i=this.getActiveMarkdownView();return i?(t||this.stateManager.getButton(i).handleClick(),!0):!1}})}onunload(){this.stateManager.removeAll()}async loadSettings(){this.settings=Object.assign({},F,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};
